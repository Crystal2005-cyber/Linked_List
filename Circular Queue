#include <stdio.h>
#define SIZE 5

int cqueue[SIZE];
int front = -1, rear = -1;

// Check if queue is full
int isFull() {
    return (front == 0 && rear == SIZE - 1) || (rear == (front - 1) % (SIZE - 1));
}

// Check if queue is empty
int isEmpty() {
    return (front == -1);
}

// Enqueue operation
void enqueue(int value) {
    if (isFull()) {
        printf("Queue Overflow! Cannot insert %d\n", value);
        return;
    }
    if (front == -1) {  // first insertion
        front = rear = 0;
    } else if (rear == SIZE - 1 && front != 0) {
        rear = 0; // wrap around
    } else {
        rear++;
    }
    cqueue[rear] = value;
    printf("%d enqueued to queue.\n", value);
}

// Dequeue operation
void dequeue() {
    if (isEmpty()) {
        printf("Queue Underflow! Cannot dequeue.\n");
        return;
    }
    int data = cqueue[front];
    printf("%d dequeued from queue.\n", data);

    if (front == rear) {  // single element
        front = rear = -1;
    } else if (front == SIZE - 1) {
        front = 0; // wrap around
    } else {
        front++;
    }
}

// Display queue
void display() {
    if (isEmpty()) {
        printf("Queue is empty.\n");
        return;
    }
    printf("Queue elements: ");
    if (rear >= front) {
        for (int i = front; i <= rear; i++)
            printf("%d ", cqueue[i]);
    } else {
        for (int i = front; i < SIZE; i++)
            printf("%d ", cqueue[i]);
        for (int i = 0; i <= rear; i++)
            printf("%d ", cqueue[i]);
    }
    printf("\n");
}

int main() {
    enqueue(10);
    enqueue(20);
    enqueue(30);
    enqueue(40);
    enqueue(50);
    display();

    dequeue();
    dequeue();
    display();

    enqueue(60);
    enqueue(70);
    display();

    dequeue();
    display();

    return 0;
}
